// This file is @generated by prost-build.
/// Defines the block rate limits for CLOB specific operations.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockRateLimitConfiguration {
    /// How many short term order attempts (successful and failed) are allowed for
    /// an account per N blocks. Note that the rate limits are applied
    /// in an AND fashion such that an order placement must pass all rate limit
    /// configurations.
    ///
    /// Specifying 0 values disables this rate limit.
    /// Deprecated in favor of `max_short_term_orders_and_cancels_per_n_blocks`
    /// for v5.x onwards.
    #[deprecated]
    #[prost(message, repeated, tag = "1")]
    pub max_short_term_orders_per_n_blocks: ::prost::alloc::vec::Vec<
        MaxPerNBlocksRateLimit,
    >,
    /// How many stateful order attempts (successful and failed) are allowed for
    /// an account per N blocks. Note that the rate limits are applied
    /// in an AND fashion such that an order placement must pass all rate limit
    /// configurations.
    ///
    /// Specifying 0 values disables this rate limit.
    #[prost(message, repeated, tag = "2")]
    pub max_stateful_orders_per_n_blocks: ::prost::alloc::vec::Vec<
        MaxPerNBlocksRateLimit,
    >,
    /// How many short term order cancellation attempts (successful and failed) are
    /// allowed for an account per N blocks. Note that the rate limits are
    /// applied in an AND fashion such that an order cancellation must pass all
    /// rate limit configurations.
    ///
    /// Specifying 0 values disables this rate limit.
    /// Deprecated in favor of `max_short_term_orders_and_cancels_per_n_blocks`
    /// for v5.x onwards.
    #[deprecated]
    #[prost(message, repeated, tag = "3")]
    pub max_short_term_order_cancellations_per_n_blocks: ::prost::alloc::vec::Vec<
        MaxPerNBlocksRateLimit,
    >,
    /// How many short term order place and cancel attempts (successful and failed)
    /// are allowed for an account per N blocks. Note that the rate limits are
    /// applied in an AND fashion such that an order placement must pass all rate
    /// limit configurations.
    ///
    /// Specifying 0 values disables this rate limit.
    #[prost(message, repeated, tag = "4")]
    pub max_short_term_orders_and_cancels_per_n_blocks: ::prost::alloc::vec::Vec<
        MaxPerNBlocksRateLimit,
    >,
}
/// Defines a rate limit over a specific number of blocks.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaxPerNBlocksRateLimit {
    /// How many blocks the rate limit is over.
    /// Specifying 0 is invalid.
    #[prost(uint32, tag = "1")]
    pub num_blocks: u32,
    /// What the limit is for `num_blocks`.
    /// Specifying 0 is invalid.
    #[prost(uint32, tag = "2")]
    pub limit: u32,
}
/// PerpetualClobMetadata contains metadata for a `ClobPair`
/// representing a Perpetual product.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerpetualClobMetadata {
    /// Id of the Perpetual the CLOB allows trading of.
    #[prost(uint32, tag = "1")]
    pub perpetual_id: u32,
}
/// PerpetualClobMetadata contains metadata for a `ClobPair`
/// representing a Spot product.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpotClobMetadata {
    /// Id of the base Asset in the trading pair.
    #[prost(uint32, tag = "1")]
    pub base_asset_id: u32,
    /// Id of the quote Asset in the trading pair.
    #[prost(uint32, tag = "2")]
    pub quote_asset_id: u32,
}
/// ClobPair represents a single CLOB pair for a given product
/// in state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClobPair {
    /// ID of the orderbook that stores all resting liquidity for this CLOB.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// Minimum increment in the size of orders on the CLOB, in base quantums.
    #[prost(uint64, tag = "4")]
    pub step_base_quantums: u64,
    /// Defines the tick size of the orderbook by defining how many subticks
    /// are in one tick. That is, the subticks of any valid order must be a
    /// multiple of this value. Generally this value should start `>= 100`to
    /// allow room for decreasing it.
    #[prost(uint32, tag = "5")]
    pub subticks_per_tick: u32,
    /// `10^Exponent` gives the number of QuoteQuantums traded per BaseQuantum
    /// per Subtick.
    #[prost(sint32, tag = "6")]
    pub quantum_conversion_exponent: i32,
    #[prost(enumeration = "clob_pair::Status", tag = "7")]
    pub status: i32,
    /// Product-specific metadata. Perpetual CLOBs will have
    /// PerpetualClobMetadata, and Spot CLOBs will have SpotClobMetadata.
    #[prost(oneof = "clob_pair::Metadata", tags = "2, 3")]
    pub metadata: ::core::option::Option<clob_pair::Metadata>,
}
/// Nested message and enum types in `ClobPair`.
pub mod clob_pair {
    /// Status of the CLOB.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Status {
        /// Default value. This value is invalid and unused.
        Unspecified = 0,
        /// STATUS_ACTIVE represents an active clob pair.
        Active = 1,
        /// STATUS_PAUSED behavior is unfinalized.
        /// TODO(DEC-600): update this documentation.
        Paused = 2,
        /// STATUS_CANCEL_ONLY behavior is unfinalized.
        /// TODO(DEC-600): update this documentation.
        CancelOnly = 3,
        /// STATUS_POST_ONLY behavior is unfinalized.
        /// TODO(DEC-600): update this documentation.
        PostOnly = 4,
        /// STATUS_INITIALIZING represents a newly-added clob pair.
        /// Clob pairs in this state only accept orders which are
        /// both short-term and post-only.
        Initializing = 5,
        /// STATUS_FINAL_SETTLEMENT represents a clob pair which is deactivated
        /// and trading has ceased. All open positions will be closed by the
        /// protocol. Open stateful orders will be cancelled. Open short-term
        /// orders will be left to expire.
        FinalSettlement = 6,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Status::Unspecified => "STATUS_UNSPECIFIED",
                Status::Active => "STATUS_ACTIVE",
                Status::Paused => "STATUS_PAUSED",
                Status::CancelOnly => "STATUS_CANCEL_ONLY",
                Status::PostOnly => "STATUS_POST_ONLY",
                Status::Initializing => "STATUS_INITIALIZING",
                Status::FinalSettlement => "STATUS_FINAL_SETTLEMENT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "STATUS_ACTIVE" => Some(Self::Active),
                "STATUS_PAUSED" => Some(Self::Paused),
                "STATUS_CANCEL_ONLY" => Some(Self::CancelOnly),
                "STATUS_POST_ONLY" => Some(Self::PostOnly),
                "STATUS_INITIALIZING" => Some(Self::Initializing),
                "STATUS_FINAL_SETTLEMENT" => Some(Self::FinalSettlement),
                _ => None,
            }
        }
    }
    /// Product-specific metadata. Perpetual CLOBs will have
    /// PerpetualClobMetadata, and Spot CLOBs will have SpotClobMetadata.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Metadata {
        #[prost(message, tag = "2")]
        PerpetualClobMetadata(super::PerpetualClobMetadata),
        #[prost(message, tag = "3")]
        SpotClobMetadata(super::SpotClobMetadata),
    }
}
/// Defines the set of equity tiers to limit how many open orders
/// a subaccount is allowed to have.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquityTierLimitConfiguration {
    /// How many short term stateful orders are allowed per equity tier.
    /// Specifying 0 values disables this limit.
    #[prost(message, repeated, tag = "1")]
    pub short_term_order_equity_tiers: ::prost::alloc::vec::Vec<EquityTierLimit>,
    /// How many open stateful orders are allowed per equity tier.
    /// Specifying 0 values disables this limit.
    #[prost(message, repeated, tag = "2")]
    pub stateful_order_equity_tiers: ::prost::alloc::vec::Vec<EquityTierLimit>,
}
/// Defines an equity tier limit.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquityTierLimit {
    /// The total net collateral in USDC quote quantums of equity required.
    #[prost(bytes = "vec", tag = "1")]
    pub usd_tnc_required: ::prost::alloc::vec::Vec<u8>,
    /// What the limit is for `usd_tnc_required`.
    #[prost(uint32, tag = "2")]
    pub limit: u32,
}
/// LiquidationsConfig stores all configurable fields related to liquidations.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidationsConfig {
    /// The maximum liquidation fee (in parts-per-million). This fee goes
    /// 100% to the insurance fund.
    #[prost(uint32, tag = "1")]
    pub max_liquidation_fee_ppm: u32,
    /// Limits around how much of a single position can be liquidated
    /// within a single block.
    #[prost(message, optional, tag = "2")]
    pub position_block_limits: ::core::option::Option<PositionBlockLimits>,
    /// Limits around how many quote quantums from a single subaccount can
    /// be liquidated within a single block.
    #[prost(message, optional, tag = "3")]
    pub subaccount_block_limits: ::core::option::Option<SubaccountBlockLimits>,
    /// Config about how the fillable-price spread from the oracle price
    /// increases based on the adjusted bankruptcy rating of the subaccount.
    #[prost(message, optional, tag = "4")]
    pub fillable_price_config: ::core::option::Option<FillablePriceConfig>,
}
/// PositionBlockLimits stores all configurable fields related to limits
/// around how much of a single position can be liquidated within a single block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionBlockLimits {
    /// The minimum amount of quantums to liquidate for each message (in
    /// quote quantums).
    /// Overridden by the maximum size of the position.
    #[prost(uint64, tag = "1")]
    pub min_position_notional_liquidated: u64,
    /// The maximum portion of the position liquidated (in parts-per-
    /// million). Overridden by min_position_notional_liquidated.
    #[prost(uint32, tag = "2")]
    pub max_position_portion_liquidated_ppm: u32,
}
/// SubaccountBlockLimits stores all configurable fields related to limits
/// around how many quote quantums from a single subaccount can
/// be liquidated within a single block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubaccountBlockLimits {
    /// The maximum notional amount that a single subaccount can have
    /// liquidated (in quote quantums) per block.
    #[prost(uint64, tag = "1")]
    pub max_notional_liquidated: u64,
    /// The maximum insurance-fund payout amount for a given subaccount
    /// per block. I.e. how much it can cover for that subaccount.
    #[prost(uint64, tag = "2")]
    pub max_quantums_insurance_lost: u64,
}
/// FillablePriceConfig stores all configurable fields related to calculating
/// the fillable price for liquidating a position.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillablePriceConfig {
    /// The rate at which the Adjusted Bankruptcy Rating increases.
    #[prost(uint32, tag = "1")]
    pub bankruptcy_adjustment_ppm: u32,
    /// The maximum value that the liquidation spread can take, as
    /// a ratio against the position's maintenance margin.
    #[prost(uint32, tag = "2")]
    pub spread_to_maintenance_margin_ratio_ppm: u32,
}
/// GenesisState defines the clob module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "1")]
    pub clob_pairs: ::prost::alloc::vec::Vec<ClobPair>,
    #[prost(message, optional, tag = "2")]
    pub liquidations_config: ::core::option::Option<LiquidationsConfig>,
    #[prost(message, optional, tag = "3")]
    pub block_rate_limit_config: ::core::option::Option<BlockRateLimitConfiguration>,
    #[prost(message, optional, tag = "4")]
    pub equity_tier_limit_config: ::core::option::Option<EquityTierLimitConfiguration>,
}
/// PerpetualLiquidationInfo holds information about a liquidation that occurred
/// for a position held by a subaccount.
/// Note this proto is defined to make it easier to hash
/// the metadata of a liquidation, and is never written to state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerpetualLiquidationInfo {
    /// The id of the subaccount that got liquidated/deleveraged or was deleveraged
    /// onto.
    #[prost(message, optional, tag = "1")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The id of the perpetual involved.
    #[prost(uint32, tag = "2")]
    pub perpetual_id: u32,
}
/// SubaccountLiquidationInfo holds liquidation information per-subaccount in the
/// current block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubaccountLiquidationInfo {
    /// An unsorted list of unique perpetual IDs that the subaccount has previously
    /// liquidated.
    #[prost(uint32, repeated, tag = "1")]
    pub perpetuals_liquidated: ::prost::alloc::vec::Vec<u32>,
    /// The notional value (in quote quantums, determined by the oracle price) of
    /// all positions liquidated for this subaccount.
    #[prost(uint64, tag = "2")]
    pub notional_liquidated: u64,
    /// The amount of funds that the insurance fund has lost
    /// covering this subaccount.
    #[prost(uint64, tag = "3")]
    pub quantums_insurance_lost: u64,
}
/// SubaccountOpenPositionInfo holds information about open positions for a
/// perpetual.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubaccountOpenPositionInfo {
    /// The id of the perpetual.
    #[prost(uint32, tag = "1")]
    pub perpetual_id: u32,
    /// The ids of the subaccounts with long positions.
    #[prost(message, repeated, tag = "2")]
    pub subaccounts_with_long_position: ::prost::alloc::vec::Vec<
        super::subaccounts::SubaccountId,
    >,
    /// The ids of the subaccounts with short positions.
    #[prost(message, repeated, tag = "3")]
    pub subaccounts_with_short_position: ::prost::alloc::vec::Vec<
        super::subaccounts::SubaccountId,
    >,
}
/// OrderId refers to a single order belonging to a Subaccount.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderId {
    /// The subaccount ID that opened this order.
    /// Note that this field has `gogoproto.nullable = false` so that it is
    /// generated as a value instead of a pointer. This is because the `OrderId`
    /// proto is used as a key within maps, and map comparisons will compare
    /// pointers for equality (when the desired behavior is to compare the values).
    #[prost(message, optional, tag = "1")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The client ID of this order, unique with respect to the specific
    /// sub account (I.E., the same subaccount can't have two orders with
    /// the same ClientId).
    #[prost(fixed32, tag = "2")]
    pub client_id: u32,
    /// order_flags represent order flags for the order. This field is invalid if
    /// it's greater than 127 (larger than one byte). Each bit in the first byte
    /// represents a different flag. Currently only two flags are supported.
    ///
    /// Starting from the bit after the most MSB (note that the MSB is used in
    /// proto varint encoding, and therefore cannot be used): Bit 1 is set if this
    /// order is a Long-Term order (0x40, or 64 as a uint8). Bit 2 is set if this
    /// order is a Conditional order (0x20, or 32 as a uint8).
    ///
    /// If neither bit is set, the order is assumed to be a Short-Term order.
    ///
    /// If both bits are set or bits other than the 2nd and 3rd are set, the order
    /// ID is invalid.
    #[prost(uint32, tag = "3")]
    pub order_flags: u32,
    /// ID of the CLOB the order is created for.
    #[prost(uint32, tag = "4")]
    pub clob_pair_id: u32,
}
/// OrdersFilledDuringLatestBlock represents a list of `OrderIds` that were
/// filled by any non-zero amount in the latest block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrdersFilledDuringLatestBlock {
    /// A list of unique order_ids that were filled by any non-zero amount in the
    /// latest block.
    #[prost(message, repeated, tag = "1")]
    pub order_ids: ::prost::alloc::vec::Vec<OrderId>,
}
/// PotentiallyPrunableOrders represents a list of orders that may be prunable
/// from state at a future block height.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PotentiallyPrunableOrders {
    /// A list of unique order_ids that may potentially be pruned from state at a
    /// future block height.
    #[prost(message, repeated, tag = "1")]
    pub order_ids: ::prost::alloc::vec::Vec<OrderId>,
}
/// OrderFillState represents the fill amount of an order according to on-chain
/// state. This proto includes both the current on-chain fill amount of the
/// order, as well as the block at which this information can be pruned from
/// state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderFillState {
    /// The current fillAmount of the order according to on-chain state.
    #[prost(uint64, tag = "1")]
    pub fill_amount: u64,
    /// The block height at which the fillAmount state for this order can be
    /// pruned.
    #[prost(uint32, tag = "2")]
    pub prunable_block_height: u32,
}
/// StatefulOrderTimeSliceValue represents the type of the value of the
/// `StatefulOrdersTimeSlice` in state. The `StatefulOrdersTimeSlice`
/// in state consists of key/value pairs where the keys are UTF-8-encoded
/// `RFC3339NANO` timestamp strings with right-padded zeroes and no
/// time zone info, and the values are of type `StatefulOrderTimeSliceValue`.
/// This `StatefulOrderTimeSliceValue` in state is used for managing stateful
/// order expiration. Stateful order expirations can be for either long term
/// or conditional orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatefulOrderTimeSliceValue {
    /// A unique list of order_ids that expire at this timestamp, sorted in
    /// ascending order by block height and transaction index of each stateful
    /// order.
    #[prost(message, repeated, tag = "1")]
    pub order_ids: ::prost::alloc::vec::Vec<OrderId>,
}
/// LongTermOrderPlacement represents the placement of a stateful order in
/// state. It stores the stateful order itself and the `BlockHeight` and
/// `TransactionIndex` at which the order was placed.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LongTermOrderPlacement {
    #[prost(message, optional, tag = "1")]
    pub order: ::core::option::Option<Order>,
    /// The block height and transaction index at which the order was placed.
    /// Used for ordering by time priority when the chain is restarted.
    #[prost(message, optional, tag = "2")]
    pub placement_index: ::core::option::Option<TransactionOrdering>,
}
/// ConditionalOrderPlacement represents the placement of a conditional order in
/// state. It stores the stateful order itself, the `BlockHeight` and
/// `TransactionIndex` at which the order was placed and triggered.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConditionalOrderPlacement {
    #[prost(message, optional, tag = "1")]
    pub order: ::core::option::Option<Order>,
    /// The block height and transaction index at which the order was placed.
    #[prost(message, optional, tag = "2")]
    pub placement_index: ::core::option::Option<TransactionOrdering>,
    /// The block height and transaction index at which the order was triggered.
    /// Set to be nil if the transaction has not been triggered.
    /// Used for ordering by time priority when the chain is restarted.
    #[prost(message, optional, tag = "3")]
    pub trigger_index: ::core::option::Option<TransactionOrdering>,
}
/// Order represents a single order belonging to a `Subaccount`
/// for a particular `ClobPair`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// The unique ID of this order. Meant to be unique across all orders.
    #[prost(message, optional, tag = "1")]
    pub order_id: ::core::option::Option<OrderId>,
    #[prost(enumeration = "order::Side", tag = "2")]
    pub side: i32,
    /// The size of this order in base quantums. Must be a multiple of
    /// `ClobPair.StepBaseQuantums` (where `ClobPair.Id = orderId.ClobPairId`).
    #[prost(uint64, tag = "3")]
    pub quantums: u64,
    /// The price level that this order will be placed at on the orderbook,
    /// in subticks. Must be a multiple of ClobPair.SubticksPerTick
    /// (where `ClobPair.Id = orderId.ClobPairId`).
    #[prost(uint64, tag = "4")]
    pub subticks: u64,
    /// The time in force of this order.
    #[prost(enumeration = "order::TimeInForce", tag = "7")]
    pub time_in_force: i32,
    /// Enforces that the order can only reduce the size of an existing position.
    /// If a ReduceOnly order would change the side of the existing position,
    /// its size is reduced to that of the remaining size of the position.
    /// If existing orders on the book with ReduceOnly
    /// would already close the position, the least aggressive (out-of-the-money)
    /// ReduceOnly orders are resized and canceled first.
    #[prost(bool, tag = "8")]
    pub reduce_only: bool,
    /// Set of bit flags set arbitrarily by clients and ignored by the protocol.
    /// Used by indexer to infer information about a placed order.
    #[prost(uint32, tag = "9")]
    pub client_metadata: u32,
    #[prost(enumeration = "order::ConditionType", tag = "10")]
    pub condition_type: i32,
    /// conditional_order_trigger_subticks represents the price at which this order
    /// will be triggered. If the condition_type is CONDITION_TYPE_UNSPECIFIED,
    /// this value is enforced to be 0. If this value is nonzero, condition_type
    /// cannot be CONDITION_TYPE_UNSPECIFIED. Value is in subticks.
    /// Must be a multiple of ClobPair.SubticksPerTick (where `ClobPair.Id =
    /// orderId.ClobPairId`).
    #[prost(uint64, tag = "11")]
    pub conditional_order_trigger_subticks: u64,
    /// Information about when the order expires.
    #[prost(oneof = "order::GoodTilOneof", tags = "5, 6")]
    pub good_til_oneof: ::core::option::Option<order::GoodTilOneof>,
}
/// Nested message and enum types in `Order`.
pub mod order {
    /// Represents the side of the orderbook the order will be placed on.
    /// Note that Side.SIDE_UNSPECIFIED is an invalid order and cannot be
    /// placed on the orderbook.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Side {
        /// Default value. This value is invalid and unused.
        Unspecified = 0,
        /// SIDE_BUY is used to represent a BUY order.
        Buy = 1,
        /// SIDE_SELL is used to represent a SELL order.
        Sell = 2,
    }
    impl Side {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Side::Unspecified => "SIDE_UNSPECIFIED",
                Side::Buy => "SIDE_BUY",
                Side::Sell => "SIDE_SELL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SIDE_UNSPECIFIED" => Some(Self::Unspecified),
                "SIDE_BUY" => Some(Self::Buy),
                "SIDE_SELL" => Some(Self::Sell),
                _ => None,
            }
        }
    }
    /// TimeInForce indicates how long an order will remain active before it
    /// is executed or expires.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TimeInForce {
        /// TIME_IN_FORCE_UNSPECIFIED represents the default behavior where an
        /// order will first match with existing orders on the book, and any
        /// remaining size will be added to the book as a maker order.
        Unspecified = 0,
        /// TIME_IN_FORCE_IOC enforces that an order only be matched with
        /// maker orders on the book. If the order has remaining size after
        /// matching with existing orders on the book, the remaining size
        /// is not placed on the book.
        Ioc = 1,
        /// TIME_IN_FORCE_POST_ONLY enforces that an order only be placed
        /// on the book as a maker order. Note this means that validators will cancel
        /// any newly-placed post only orders that would cross with other maker
        /// orders.
        PostOnly = 2,
        /// TIME_IN_FORCE_FILL_OR_KILL enforces that an order will either be filled
        /// completely and immediately by maker orders on the book or canceled if the
        /// entire amount can‘t be matched.
        FillOrKill = 3,
    }
    impl TimeInForce {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                TimeInForce::Unspecified => "TIME_IN_FORCE_UNSPECIFIED",
                TimeInForce::Ioc => "TIME_IN_FORCE_IOC",
                TimeInForce::PostOnly => "TIME_IN_FORCE_POST_ONLY",
                TimeInForce::FillOrKill => "TIME_IN_FORCE_FILL_OR_KILL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TIME_IN_FORCE_UNSPECIFIED" => Some(Self::Unspecified),
                "TIME_IN_FORCE_IOC" => Some(Self::Ioc),
                "TIME_IN_FORCE_POST_ONLY" => Some(Self::PostOnly),
                "TIME_IN_FORCE_FILL_OR_KILL" => Some(Self::FillOrKill),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ConditionType {
        /// CONDITION_TYPE_UNSPECIFIED represents the default behavior where an
        /// order will be placed immediately on the orderbook.
        Unspecified = 0,
        /// CONDITION_TYPE_STOP_LOSS represents a stop order. A stop order will
        /// trigger when the oracle price moves at or above the trigger price for
        /// buys, and at or below the trigger price for sells.
        StopLoss = 1,
        /// CONDITION_TYPE_TAKE_PROFIT represents a take profit order. A take profit
        /// order will trigger when the oracle price moves at or below the trigger
        /// price for buys and at or above the trigger price for sells.
        TakeProfit = 2,
    }
    impl ConditionType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ConditionType::Unspecified => "CONDITION_TYPE_UNSPECIFIED",
                ConditionType::StopLoss => "CONDITION_TYPE_STOP_LOSS",
                ConditionType::TakeProfit => "CONDITION_TYPE_TAKE_PROFIT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CONDITION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "CONDITION_TYPE_STOP_LOSS" => Some(Self::StopLoss),
                "CONDITION_TYPE_TAKE_PROFIT" => Some(Self::TakeProfit),
                _ => None,
            }
        }
    }
    /// Information about when the order expires.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GoodTilOneof {
        /// The last block this order can be executed at (after which it will be
        /// unfillable). Used only for Short-Term orders. If this value is non-zero
        /// then the order is assumed to be a Short-Term order.
        #[prost(uint32, tag = "5")]
        GoodTilBlock(u32),
        /// good_til_block_time represents the unix timestamp (in seconds) at which a
        /// stateful order will be considered expired. The
        /// good_til_block_time is always evaluated against the previous block's
        /// `BlockTime` instead of the block in which the order is committed. If this
        /// value is non-zero then the order is assumed to be a stateful or
        /// conditional order.
        #[prost(fixed32, tag = "6")]
        GoodTilBlockTime(u32),
    }
}
/// TransactionOrdering represents a unique location in the block where a
/// transaction was placed. This proto includes both block height and the
/// transaction index that the specific transaction was placed. This information
/// is used for ordering by time priority when the chain is restarted.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionOrdering {
    /// Block height in which the transaction was placed.
    #[prost(uint32, tag = "1")]
    pub block_height: u32,
    /// Within the block, the unique transaction index.
    #[prost(uint32, tag = "2")]
    pub transaction_index: u32,
}
/// ClobMatch represents an operations queue entry around all different types
/// of matches, specifically regular matches, liquidation matches, and
/// deleveraging matches.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClobMatch {
    /// The match type that this message includes.
    #[prost(oneof = "clob_match::Match", tags = "1, 2, 3")]
    pub r#match: ::core::option::Option<clob_match::Match>,
}
/// Nested message and enum types in `ClobMatch`.
pub mod clob_match {
    /// The match type that this message includes.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Match {
        #[prost(message, tag = "1")]
        MatchOrders(super::MatchOrders),
        #[prost(message, tag = "2")]
        MatchPerpetualLiquidation(super::MatchPerpetualLiquidation),
        #[prost(message, tag = "3")]
        MatchPerpetualDeleveraging(super::MatchPerpetualDeleveraging),
    }
}
/// MakerFill represents the filled amount of a matched maker order.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakerFill {
    /// The filled amount of the matched maker order, in base quantums.
    /// TODO(CLOB-571): update to use SerializableInt.
    #[prost(uint64, tag = "1")]
    pub fill_amount: u64,
    /// The `OrderId` of the matched maker order.
    #[prost(message, optional, tag = "2")]
    pub maker_order_id: ::core::option::Option<OrderId>,
}
/// MatchOrders is an injected message used for matching orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchOrders {
    /// The `OrderId` of the taker order.
    #[prost(message, optional, tag = "1")]
    pub taker_order_id: ::core::option::Option<OrderId>,
    /// An ordered list of fills created by this taker order.
    #[prost(message, repeated, tag = "2")]
    pub fills: ::prost::alloc::vec::Vec<MakerFill>,
}
/// MatchPerpetualLiquidation is an injected message used for liquidating a
/// subaccount.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchPerpetualLiquidation {
    /// ID of the subaccount that was liquidated.
    #[prost(message, optional, tag = "1")]
    pub liquidated: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The ID of the clob pair involved in the liquidation.
    #[prost(uint32, tag = "2")]
    pub clob_pair_id: u32,
    /// The ID of the perpetual involved in the liquidation.
    #[prost(uint32, tag = "3")]
    pub perpetual_id: u32,
    /// The total size of the liquidation order including any unfilled size.
    #[prost(uint64, tag = "4")]
    pub total_size: u64,
    /// `true` if liquidating a short position, `false` otherwise.
    #[prost(bool, tag = "5")]
    pub is_buy: bool,
    /// An ordered list of fills created by this liquidation.
    #[prost(message, repeated, tag = "6")]
    pub fills: ::prost::alloc::vec::Vec<MakerFill>,
}
/// MatchPerpetualDeleveraging is an injected message used for deleveraging a
/// subaccount.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchPerpetualDeleveraging {
    /// ID of the subaccount that was liquidated.
    #[prost(message, optional, tag = "1")]
    pub liquidated: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The ID of the perpetual that was liquidated.
    #[prost(uint32, tag = "2")]
    pub perpetual_id: u32,
    /// An ordered list of fills created by this liquidation.
    #[prost(message, repeated, tag = "3")]
    pub fills: ::prost::alloc::vec::Vec<match_perpetual_deleveraging::Fill>,
    /// Flag denoting whether the deleveraging operation was for the purpose
    /// of final settlement. Final settlement matches are at the oracle price,
    /// whereas deleveraging happens at the bankruptcy price of the deleveraged
    /// subaccount.
    #[prost(bool, tag = "4")]
    pub is_final_settlement: bool,
}
/// Nested message and enum types in `MatchPerpetualDeleveraging`.
pub mod match_perpetual_deleveraging {
    /// Fill represents a fill between the liquidated and offsetting subaccount.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Fill {
        /// ID of the subaccount that was used to offset the liquidated subaccount's
        /// position.
        #[prost(message, optional, tag = "1")]
        pub offsetting_subaccount_id: ::core::option::Option<
            super::super::subaccounts::SubaccountId,
        >,
        /// The amount filled between the liquidated and offsetting position, in
        /// base quantums.
        /// TODO(CLOB-571): update to use SerializableInt.
        #[prost(uint64, tag = "2")]
        pub fill_amount: u64,
    }
}
/// MEVMatch represents all necessary data to calculate MEV for a regular match.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MevMatch {
    #[prost(message, optional, tag = "1")]
    pub taker_order_subaccount_id: ::core::option::Option<
        super::subaccounts::SubaccountId,
    >,
    #[prost(int32, tag = "2")]
    pub taker_fee_ppm: i32,
    #[prost(message, optional, tag = "3")]
    pub maker_order_subaccount_id: ::core::option::Option<
        super::subaccounts::SubaccountId,
    >,
    #[prost(uint64, tag = "4")]
    pub maker_order_subticks: u64,
    #[prost(bool, tag = "5")]
    pub maker_order_is_buy: bool,
    #[prost(int32, tag = "6")]
    pub maker_fee_ppm: i32,
    #[prost(uint32, tag = "7")]
    pub clob_pair_id: u32,
    #[prost(uint64, tag = "8")]
    pub fill_amount: u64,
}
/// MEVLiquidationMatch represents all necessary data to calculate MEV for a
/// liquidation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MevLiquidationMatch {
    #[prost(message, optional, tag = "1")]
    pub liquidated_subaccount_id: ::core::option::Option<
        super::subaccounts::SubaccountId,
    >,
    #[prost(int64, tag = "2")]
    pub insurance_fund_delta_quote_quantums: i64,
    #[prost(message, optional, tag = "3")]
    pub maker_order_subaccount_id: ::core::option::Option<
        super::subaccounts::SubaccountId,
    >,
    #[prost(uint64, tag = "4")]
    pub maker_order_subticks: u64,
    #[prost(bool, tag = "5")]
    pub maker_order_is_buy: bool,
    #[prost(int32, tag = "6")]
    pub maker_fee_ppm: i32,
    #[prost(uint32, tag = "7")]
    pub clob_pair_id: u32,
    #[prost(uint64, tag = "8")]
    pub fill_amount: u64,
}
/// ClobMidPrice contains the mid price of a CLOB pair, represented by it's ID.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClobMidPrice {
    #[prost(message, optional, tag = "1")]
    pub clob_pair: ::core::option::Option<ClobPair>,
    #[prost(uint64, tag = "2")]
    pub subticks: u64,
}
/// ValidatorMevMatches contains all matches from the validator's local
/// operations queue.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorMevMatches {
    #[prost(message, repeated, tag = "1")]
    pub matches: ::prost::alloc::vec::Vec<MevMatch>,
    #[prost(message, repeated, tag = "2")]
    pub liquidation_matches: ::prost::alloc::vec::Vec<MevLiquidationMatch>,
}
/// MevNodeToNodeMetrics is a data structure for encapsulating all MEV node <>
/// node metrics.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MevNodeToNodeMetrics {
    #[prost(message, optional, tag = "1")]
    pub validator_mev_matches: ::core::option::Option<ValidatorMevMatches>,
    #[prost(message, repeated, tag = "2")]
    pub clob_mid_prices: ::prost::alloc::vec::Vec<ClobMidPrice>,
    #[prost(message, optional, tag = "3")]
    pub bp_mev_matches: ::core::option::Option<ValidatorMevMatches>,
    #[prost(uint64, tag = "4")]
    pub proposal_receive_time: u64,
}
/// OrderRemoval is a request type used for forced removal of stateful orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderRemoval {
    #[prost(message, optional, tag = "1")]
    pub order_id: ::core::option::Option<OrderId>,
    #[prost(enumeration = "order_removal::RemovalReason", tag = "2")]
    pub removal_reason: i32,
}
/// Nested message and enum types in `OrderRemoval`.
pub mod order_removal {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RemovalReason {
        /// REMOVAL_REASON_UNSPECIFIED represents an unspecified removal reason. This
        /// removal reason is used as a catchall and should never appear on an
        /// OrderRemoval in the operations queue.
        Unspecified = 0,
        /// REMOVAL_REASON_UNDERCOLLATERALIZED represents a removal of an order which
        /// if filled in isolation with respect to the current state of the
        /// subaccount would leave the subaccount undercollateralized.
        Undercollateralized = 1,
        /// REMOVAL_REASON_INVALID_REDUCE_ONLY represents a removal of a reduce-only
        /// order which if filled in isolation with respect to the current state of
        /// the subaccount would cause the subaccount's existing position to increase
        /// or change sides.
        InvalidReduceOnly = 2,
        /// REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER represents a removal of
        /// a stateful post-only order that was deemed invalid because it crossed
        /// maker orders on the book of the proposer.
        PostOnlyWouldCrossMakerOrder = 3,
        /// REMOVAL_REASON_INVALID_SELF_TRADE represents a removal of a stateful
        /// order that was deemed invalid because it constituted a self trade on the
        /// proposers orderbook.
        InvalidSelfTrade = 4,
        /// REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED represents a
        /// removal of a conditional FOK order that was deemed invalid because it
        /// could not be completely filled. Conditional FOK orders should always be
        /// fully-filled or removed in the block after they are triggered.
        ConditionalFokCouldNotBeFullyFilled = 5,
        /// REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK represents a removal
        /// of a conditional IOC order.
        /// Conditional IOC orders should always have their remaining size removed
        /// in the block after they are triggered.
        ConditionalIocWouldRestOnBook = 6,
        /// REMOVAL_REASON_FULLY_FILLED represents a removal of an order that
        /// was fully filled and should therefore be removed from state.
        FullyFilled = 7,
        /// REMOVAL_REASON_FULLY_FILLED represents a removal of an order that
        ///   would lead to the subaccount violating isolated subaccount constraints.
        ViolatesIsolatedSubaccountConstraints = 8,
    }
    impl RemovalReason {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RemovalReason::Unspecified => "REMOVAL_REASON_UNSPECIFIED",
                RemovalReason::Undercollateralized => {
                    "REMOVAL_REASON_UNDERCOLLATERALIZED"
                }
                RemovalReason::InvalidReduceOnly => "REMOVAL_REASON_INVALID_REDUCE_ONLY",
                RemovalReason::PostOnlyWouldCrossMakerOrder => {
                    "REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER"
                }
                RemovalReason::InvalidSelfTrade => "REMOVAL_REASON_INVALID_SELF_TRADE",
                RemovalReason::ConditionalFokCouldNotBeFullyFilled => {
                    "REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED"
                }
                RemovalReason::ConditionalIocWouldRestOnBook => {
                    "REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK"
                }
                RemovalReason::FullyFilled => "REMOVAL_REASON_FULLY_FILLED",
                RemovalReason::ViolatesIsolatedSubaccountConstraints => {
                    "REMOVAL_REASON_VIOLATES_ISOLATED_SUBACCOUNT_CONSTRAINTS"
                }
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REMOVAL_REASON_UNSPECIFIED" => Some(Self::Unspecified),
                "REMOVAL_REASON_UNDERCOLLATERALIZED" => Some(Self::Undercollateralized),
                "REMOVAL_REASON_INVALID_REDUCE_ONLY" => Some(Self::InvalidReduceOnly),
                "REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER" => {
                    Some(Self::PostOnlyWouldCrossMakerOrder)
                }
                "REMOVAL_REASON_INVALID_SELF_TRADE" => Some(Self::InvalidSelfTrade),
                "REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED" => {
                    Some(Self::ConditionalFokCouldNotBeFullyFilled)
                }
                "REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK" => {
                    Some(Self::ConditionalIocWouldRestOnBook)
                }
                "REMOVAL_REASON_FULLY_FILLED" => Some(Self::FullyFilled),
                "REMOVAL_REASON_VIOLATES_ISOLATED_SUBACCOUNT_CONSTRAINTS" => {
                    Some(Self::ViolatesIsolatedSubaccountConstraints)
                }
                _ => None,
            }
        }
    }
}
/// MsgCreateClobPair is a message used by x/gov for creating a new clob pair.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateClobPair {
    /// The address that controls the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// `clob_pair` defines parameters for the new clob pair.
    #[prost(message, optional, tag = "2")]
    pub clob_pair: ::core::option::Option<ClobPair>,
}
/// MsgCreateClobPairResponse defines the CreateClobPair response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateClobPairResponse {}
/// MsgProposedOperations is a message injected by block proposers to
/// specify the operations that occurred in a block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgProposedOperations {
    /// The list of operations proposed by the block proposer.
    #[prost(message, repeated, tag = "1")]
    pub operations_queue: ::prost::alloc::vec::Vec<OperationRaw>,
}
/// MsgProposedOperationsResponse is the response type of the message injected
/// by block proposers to specify the operations that occurred in a block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgProposedOperationsResponse {}
/// MsgPlaceOrder is a request type used for placing orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgPlaceOrder {
    #[prost(message, optional, tag = "1")]
    pub order: ::core::option::Option<Order>,
}
/// MsgPlaceOrderResponse is a response type used for placing orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgPlaceOrderResponse {}
/// MsgCancelOrder is a request type used for canceling orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCancelOrder {
    #[prost(message, optional, tag = "1")]
    pub order_id: ::core::option::Option<OrderId>,
    /// Information about when the order cancellation expires.
    #[prost(oneof = "msg_cancel_order::GoodTilOneof", tags = "2, 3")]
    pub good_til_oneof: ::core::option::Option<msg_cancel_order::GoodTilOneof>,
}
/// Nested message and enum types in `MsgCancelOrder`.
pub mod msg_cancel_order {
    /// Information about when the order cancellation expires.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GoodTilOneof {
        /// The last block this order cancellation can be executed at.
        /// Used only for Short-Term orders and must be zero for stateful orders.
        #[prost(uint32, tag = "2")]
        GoodTilBlock(u32),
        /// good_til_block_time represents the unix timestamp (in seconds) at which a
        /// stateful order cancellation will be considered expired. The
        /// good_til_block_time is always evaluated against the previous block's
        /// `BlockTime` instead of the block in which the order is committed.
        /// This value must be zero for Short-Term orders.
        #[prost(fixed32, tag = "3")]
        GoodTilBlockTime(u32),
    }
}
/// MsgCancelOrderResponse is a response type used for canceling orders.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCancelOrderResponse {}
/// MsgBatchCancel is a request type used for batch canceling orders.
/// This msg is not atomic. Cancels will be performed optimistically even
/// if some cancels are invalid or fail.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBatchCancel {
    /// The subaccount this batch cancel will be applied for.
    #[prost(message, optional, tag = "1")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The batch of short term orders that will be cancelled.
    #[prost(message, repeated, tag = "2")]
    pub short_term_cancels: ::prost::alloc::vec::Vec<OrderBatch>,
    /// The last block the short term order cancellations can be executed at.
    #[prost(uint32, tag = "3")]
    pub good_til_block: u32,
}
/// OrderBatch represents a batch of orders all belonging to a single clob pair
/// id. Along with a subaccount id and an order flag, is used to represent a
/// batch of orders that share the same subaccount, order flag, and clob pair id.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderBatch {
    /// The Clob Pair ID all orders in this order batch belong to.
    #[prost(uint32, tag = "1")]
    pub clob_pair_id: u32,
    /// List of client ids in this order batch.
    /// Note that this is serialized as a uint32 instead of a fixed32 to
    /// avoid issues when decoding repeated packed fixed32.
    #[prost(uint32, repeated, tag = "2")]
    pub client_ids: ::prost::alloc::vec::Vec<u32>,
}
/// MsgBatchCancelResponse is a response type used for batch canceling orders.
/// It indicates which cancel orders have succeeded or failed.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgBatchCancelResponse {
    /// A batch of short term cancel orders that have succeeded.
    #[prost(message, repeated, tag = "1")]
    pub short_term_succeeded: ::prost::alloc::vec::Vec<OrderBatch>,
    /// A batch of short term cancel orders that have failed.
    #[prost(message, repeated, tag = "2")]
    pub short_term_failed: ::prost::alloc::vec::Vec<OrderBatch>,
}
/// MsgUpdateClobPair is a request type used for updating a ClobPair in state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateClobPair {
    /// Authority is the address that may send this message.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// `clob_pair` is the ClobPair to write to state.
    #[prost(message, optional, tag = "2")]
    pub clob_pair: ::core::option::Option<ClobPair>,
}
/// MsgUpdateClobPairResponse is a response type used for setting a ClobPair's
/// status.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateClobPairResponse {}
/// OperationRaw represents an operation in the proposed operations.
/// Note that the `order_placement` operation is a signed message.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationRaw {
    /// operationRaw represents an operation that occurred, which can be a match,
    /// a signed order placement, or an order removal.
    #[prost(oneof = "operation_raw::Operation", tags = "1, 2, 3")]
    pub operation: ::core::option::Option<operation_raw::Operation>,
}
/// Nested message and enum types in `OperationRaw`.
pub mod operation_raw {
    /// operationRaw represents an operation that occurred, which can be a match,
    /// a signed order placement, or an order removal.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Operation {
        #[prost(message, tag = "1")]
        Match(super::ClobMatch),
        #[prost(bytes, tag = "2")]
        ShortTermOrderPlacement(::prost::alloc::vec::Vec<u8>),
        #[prost(message, tag = "3")]
        OrderRemoval(super::OrderRemoval),
    }
}
/// MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
/// request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateEquityTierLimitConfiguration {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Defines the equity tier limit configuration to update to. All fields must
    /// be set.
    #[prost(message, optional, tag = "2")]
    pub equity_tier_limit_config: ::core::option::Option<EquityTierLimitConfiguration>,
}
/// MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
/// response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateEquityTierLimitConfigurationResponse {}
/// MsgUpdateBlockRateLimitConfiguration is the Msg/BlockRateLimitConfiguration
/// request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateBlockRateLimitConfiguration {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Defines the block rate limit configuration to update to. All fields must be
    /// set.
    #[prost(message, optional, tag = "3")]
    pub block_rate_limit_config: ::core::option::Option<BlockRateLimitConfiguration>,
}
/// MsgUpdateBlockRateLimitConfiguration is a response type for updating the
/// liquidations config.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateBlockRateLimitConfigurationResponse {}
/// MsgUpdateLiquidationsConfig is a request type for updating the liquidations
/// config.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateLiquidationsConfig {
    /// Authority is the address that may send this message.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Defines the liquidations configuration to update to. All fields must
    /// be set.
    #[prost(message, optional, tag = "2")]
    pub liquidations_config: ::core::option::Option<LiquidationsConfig>,
}
/// MsgUpdateLiquidationsConfig is the Msg/LiquidationsConfig response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateLiquidationsConfigResponse {}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ProposedOperations is a temporary message used by block proposers
        /// for matching orders as part of the ABCI++ workaround.
        pub async fn proposed_operations(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgProposedOperations>,
        ) -> std::result::Result<
            tonic::Response<super::MsgProposedOperationsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/ProposedOperations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "ProposedOperations"));
            self.inner.unary(req, path, codec).await
        }
        /// PlaceOrder allows accounts to place orders on the orderbook.
        pub async fn place_order(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgPlaceOrder>,
        ) -> std::result::Result<
            tonic::Response<super::MsgPlaceOrderResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/PlaceOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "PlaceOrder"));
            self.inner.unary(req, path, codec).await
        }
        /// CancelOrder allows accounts to cancel existing orders on the orderbook.
        pub async fn cancel_order(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCancelOrder>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCancelOrderResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/CancelOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "CancelOrder"));
            self.inner.unary(req, path, codec).await
        }
        /// BatchCancel allows accounts to cancel a batch of orders on the orderbook.
        pub async fn batch_cancel(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgBatchCancel>,
        ) -> std::result::Result<
            tonic::Response<super::MsgBatchCancelResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/BatchCancel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "BatchCancel"));
            self.inner.unary(req, path, codec).await
        }
        /// CreateClobPair creates a new clob pair.
        pub async fn create_clob_pair(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateClobPair>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateClobPairResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/CreateClobPair",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "CreateClobPair"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateClobPair sets the status of a clob pair. Should return an error
        /// if the authority is not in the clob keeper's set of authorities,
        /// if the ClobPair id is not found in state, or if the update includes
        /// an unsupported status transition.
        pub async fn update_clob_pair(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateClobPair>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateClobPairResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/UpdateClobPair",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Msg", "UpdateClobPair"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateEquityTierLimitConfiguration updates the equity tier limit
        /// configuration in state.
        pub async fn update_equity_tier_limit_configuration(
            &mut self,
            request: impl tonic::IntoRequest<
                super::MsgUpdateEquityTierLimitConfiguration,
            >,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateEquityTierLimitConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/UpdateEquityTierLimitConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Msg",
                        "UpdateEquityTierLimitConfiguration",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateBlockRateLimitConfiguration updates the block rate limit
        /// configuration in state.
        pub async fn update_block_rate_limit_configuration(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateBlockRateLimitConfiguration>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateBlockRateLimitConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/UpdateBlockRateLimitConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Msg",
                        "UpdateBlockRateLimitConfiguration",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateLiquidationsConfig updates the liquidations configuration in state.
        pub async fn update_liquidations_config(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateLiquidationsConfig>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateLiquidationsConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Msg/UpdateLiquidationsConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.clob.Msg", "UpdateLiquidationsConfig"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Operation represents an operation in the proposed operations. Operation is
/// used internally within the memclob only.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Operation {
    /// operation represents the operation that occurred, which can be a match,
    /// short term order placement, short term order cancellation, or the placement
    /// of a pre-existing stateful order.
    #[prost(oneof = "operation::Operation", tags = "1, 2, 3, 4")]
    pub operation: ::core::option::Option<operation::Operation>,
}
/// Nested message and enum types in `Operation`.
pub mod operation {
    /// operation represents the operation that occurred, which can be a match,
    /// short term order placement, short term order cancellation, or the placement
    /// of a pre-existing stateful order.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Operation {
        #[prost(message, tag = "1")]
        Match(super::ClobMatch),
        #[prost(message, tag = "2")]
        ShortTermOrderPlacement(super::MsgPlaceOrder),
        #[prost(message, tag = "3")]
        ShortTermOrderCancellation(super::MsgCancelOrder),
        #[prost(message, tag = "4")]
        PreexistingStatefulOrder(super::OrderId),
    }
}
/// InternalOperation represents an internal operation in the operations to
/// propose. InternalOperation is used internally within the memclob only.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalOperation {
    /// operation represents the operation that occurred, which can be a match,
    /// Short-Term order placement, or the placement of a pre-existing stateful
    /// order.
    #[prost(oneof = "internal_operation::Operation", tags = "1, 2, 3, 4")]
    pub operation: ::core::option::Option<internal_operation::Operation>,
}
/// Nested message and enum types in `InternalOperation`.
pub mod internal_operation {
    /// operation represents the operation that occurred, which can be a match,
    /// Short-Term order placement, or the placement of a pre-existing stateful
    /// order.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Operation {
        #[prost(message, tag = "1")]
        Match(super::ClobMatch),
        #[prost(message, tag = "2")]
        ShortTermOrderPlacement(super::MsgPlaceOrder),
        #[prost(message, tag = "3")]
        PreexistingStatefulOrder(super::OrderId),
        #[prost(message, tag = "4")]
        OrderRemoval(super::OrderRemoval),
    }
}
/// ProcessProposerMatchesEvents is used for communicating which events occurred
/// in the last block that require updating the state of the memclob in the
/// Commit blocker. It contains information about the following state updates:
/// - Long term order IDs that were placed in the last block.
/// - Stateful order IDs that were expired in the last block.
/// - Order IDs that were filled in the last block.
/// - Stateful cancellations order IDs that were placed in the last block.
/// - Stateful order IDs forcefully removed in the last block.
/// - Conditional order IDs triggered in the last block.
/// - Conditional order IDs placed, but not triggered in the last block.
/// - The height of the block in which the events occurred.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessProposerMatchesEvents {
    #[prost(message, repeated, tag = "1")]
    pub placed_long_term_order_ids: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "2")]
    pub expired_stateful_order_ids: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "3")]
    pub order_ids_filled_in_last_block: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "4")]
    pub placed_stateful_cancellation_order_ids: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "5")]
    pub removed_stateful_order_ids: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "6")]
    pub conditional_order_ids_triggered_in_last_block: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(message, repeated, tag = "7")]
    pub placed_conditional_order_ids: ::prost::alloc::vec::Vec<OrderId>,
    #[prost(uint32, tag = "8")]
    pub block_height: u32,
}
/// QueryGetClobPairRequest is request type for the ClobPair method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetClobPairRequest {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
/// QueryClobPairResponse is response type for the ClobPair method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryClobPairResponse {
    #[prost(message, optional, tag = "1")]
    pub clob_pair: ::core::option::Option<ClobPair>,
}
/// QueryAllClobPairRequest is request type for the ClobPairAll method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllClobPairRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
/// QueryClobPairAllResponse is response type for the ClobPairAll method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryClobPairAllResponse {
    #[prost(message, repeated, tag = "1")]
    pub clob_pair: ::prost::alloc::vec::Vec<ClobPair>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
/// MevNodeToNodeCalculationRequest is a request message used to run the
/// MEV node <> node calculation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MevNodeToNodeCalculationRequest {
    /// Represents the matches on the "block proposer". Note that this field
    /// does not need to be the actual block proposer's matches for a block, since
    /// the MEV calculation logic is run with this nodes matches as the "block
    /// proposer" matches.
    #[prost(message, optional, tag = "1")]
    pub block_proposer_matches: ::core::option::Option<ValidatorMevMatches>,
    /// Represents the matches and mid-prices on the validator.
    #[prost(message, optional, tag = "2")]
    pub validator_mev_metrics: ::core::option::Option<MevNodeToNodeMetrics>,
}
/// MevNodeToNodeCalculationResponse is a response message that contains the
/// MEV node <> node calculation result.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MevNodeToNodeCalculationResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<
        mev_node_to_node_calculation_response::MevAndVolumePerClob,
    >,
}
/// Nested message and enum types in `MevNodeToNodeCalculationResponse`.
pub mod mev_node_to_node_calculation_response {
    /// MevAndVolumePerClob contains information about the MEV and volume per CLOB.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MevAndVolumePerClob {
        #[prost(uint32, tag = "1")]
        pub clob_pair_id: u32,
        #[prost(float, tag = "2")]
        pub mev: f32,
        #[prost(uint64, tag = "3")]
        pub volume: u64,
    }
}
/// QueryEquityTierLimitConfigurationRequest is a request message for
/// EquityTierLimitConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEquityTierLimitConfigurationRequest {}
/// QueryEquityTierLimitConfigurationResponse is a response message that contains
/// the EquityTierLimitConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEquityTierLimitConfigurationResponse {
    #[prost(message, optional, tag = "1")]
    pub equity_tier_limit_config: ::core::option::Option<EquityTierLimitConfiguration>,
}
/// QueryBlockRateLimitConfigurationRequest is a request message for
/// BlockRateLimitConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBlockRateLimitConfigurationRequest {}
/// QueryBlockRateLimitConfigurationResponse is a response message that contains
/// the BlockRateLimitConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBlockRateLimitConfigurationResponse {
    #[prost(message, optional, tag = "1")]
    pub block_rate_limit_config: ::core::option::Option<BlockRateLimitConfiguration>,
}
/// QueryStatefulOrderRequest is a request message for StatefulOrder.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryStatefulOrderRequest {
    /// Order id to query.
    #[prost(message, optional, tag = "1")]
    pub order_id: ::core::option::Option<OrderId>,
}
/// QueryStatefulOrderResponse is a response message that contains the stateful
/// order.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryStatefulOrderResponse {
    /// Stateful order placement.
    #[prost(message, optional, tag = "1")]
    pub order_placement: ::core::option::Option<LongTermOrderPlacement>,
    /// Fill amounts.
    #[prost(uint64, tag = "2")]
    pub fill_amount: u64,
    /// Triggered status.
    #[prost(bool, tag = "3")]
    pub triggered: bool,
}
/// QueryLiquidationsConfigurationRequest is a request message for
/// LiquidationsConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLiquidationsConfigurationRequest {}
/// QueryLiquidationsConfigurationResponse is a response message that contains
/// the LiquidationsConfiguration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLiquidationsConfigurationResponse {
    #[prost(message, optional, tag = "1")]
    pub liquidations_config: ::core::option::Option<LiquidationsConfig>,
}
/// StreamOrderbookUpdatesRequest is a request message for the
/// StreamOrderbookUpdates method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamOrderbookUpdatesRequest {
    /// Clob pair ids to stream orderbook updates for.
    #[prost(uint32, repeated, tag = "1")]
    pub clob_pair_id: ::prost::alloc::vec::Vec<u32>,
}
/// StreamOrderbookUpdatesResponse is a response message for the
/// StreamOrderbookUpdates method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamOrderbookUpdatesResponse {
    /// Orderbook updates for the clob pair.
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<StreamUpdate>,
    /// ---Additional fields used to debug issues---
    /// Block height of the updates.
    #[prost(uint32, tag = "2")]
    pub block_height: u32,
    /// Exec mode of the updates.
    #[prost(uint32, tag = "3")]
    pub exec_mode: u32,
}
/// StreamUpdate is an update that will be pushed through the
/// GRPC stream.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamUpdate {
    /// Contains one of an StreamOrderbookUpdate,
    /// StreamOrderbookFill.
    #[prost(oneof = "stream_update::UpdateMessage", tags = "1, 2")]
    pub update_message: ::core::option::Option<stream_update::UpdateMessage>,
}
/// Nested message and enum types in `StreamUpdate`.
pub mod stream_update {
    /// Contains one of an StreamOrderbookUpdate,
    /// StreamOrderbookFill.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum UpdateMessage {
        #[prost(message, tag = "1")]
        OrderbookUpdate(super::StreamOrderbookUpdate),
        #[prost(message, tag = "2")]
        OrderFill(super::StreamOrderbookFill),
    }
}
/// StreamOrderbookUpdate provides information on an orderbook update. Used in
/// the full node GRPC stream.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamOrderbookUpdate {
    /// Orderbook updates for the clob pair. Can contain order place, removals,
    /// or updates.
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<
        super::indexer::off_chain_updates::OffChainUpdateV1,
    >,
    /// Snapshot indicates if the response is from a snapshot of the orderbook.
    /// This is true for the initial response and false for all subsequent updates.
    /// Note that if the snapshot is true, then all previous entries should be
    /// discarded and the orderbook should be resynced.
    #[prost(bool, tag = "2")]
    pub snapshot: bool,
}
/// StreamOrderbookFill provides information on an orderbook fill. Used in
/// the full node GRPC stream.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamOrderbookFill {
    /// Clob match. Provides information on which orders were matched
    /// and the type of order. Fill amounts here are relative.
    #[prost(message, optional, tag = "1")]
    pub clob_match: ::core::option::Option<ClobMatch>,
    /// All orders involved in the specified clob match. Used to look up
    /// price of a match through a given maker order id.
    #[prost(message, repeated, tag = "2")]
    pub orders: ::prost::alloc::vec::Vec<Order>,
    /// Resulting fill amounts for each order in the orders array.
    #[prost(uint64, repeated, packed = "false", tag = "3")]
    pub fill_amounts: ::prost::alloc::vec::Vec<u64>,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries a ClobPair by id.
        pub async fn clob_pair(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetClobPairRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryClobPairResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/ClobPair",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Query", "ClobPair"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of ClobPair items.
        pub async fn clob_pair_all(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllClobPairRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryClobPairAllResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/ClobPairAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Query", "ClobPairAll"));
            self.inner.unary(req, path, codec).await
        }
        /// Runs the MEV node <> node calculation with the provided parameters.
        pub async fn mev_node_to_node_calculation(
            &mut self,
            request: impl tonic::IntoRequest<super::MevNodeToNodeCalculationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MevNodeToNodeCalculationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/MevNodeToNodeCalculation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Query",
                        "MevNodeToNodeCalculation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries EquityTierLimitConfiguration.
        pub async fn equity_tier_limit_configuration(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryEquityTierLimitConfigurationRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryEquityTierLimitConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/EquityTierLimitConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Query",
                        "EquityTierLimitConfiguration",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries BlockRateLimitConfiguration.
        pub async fn block_rate_limit_configuration(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryBlockRateLimitConfigurationRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryBlockRateLimitConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/BlockRateLimitConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Query",
                        "BlockRateLimitConfiguration",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries LiquidationsConfiguration.
        pub async fn liquidations_configuration(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryLiquidationsConfigurationRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryLiquidationsConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/LiquidationsConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.clob.Query",
                        "LiquidationsConfiguration",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries the stateful order for a given order id.
        pub async fn stateful_order(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryStatefulOrderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryStatefulOrderResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/StatefulOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.clob.Query", "StatefulOrder"));
            self.inner.unary(req, path, codec).await
        }
        /// Streams orderbook updates. Updates contain orderbook data
        /// such as order placements, updates, and fills.
        pub async fn stream_orderbook_updates(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamOrderbookUpdatesRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::StreamOrderbookUpdatesResponse>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.clob.Query/StreamOrderbookUpdates",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.clob.Query", "StreamOrderbookUpdates"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
